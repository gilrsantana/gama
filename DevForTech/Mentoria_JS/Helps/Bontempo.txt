lendo_arquivo.html
=================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página para leitura de arquivo</title>
</head>
<body>
    <!--Leitura de arquivo do tipo txt-->
    <h1>Leitura de Arquivo</h1>
    <br>
    <!--Procedimento para por um componente do HTML para selecionar um arquivo-->
    <input type="file" onchange="loadFile(this.files[0])">
    <br>
    
    
    <!--Criar a área para demonstrar os registros do arquivo-->
    <textarea id="output"></textarea>


    <!--Chamar o script que irá ler o arquivo e enviar os dados para o campo acima-->
    <script>
        async function loadFile(file){
            let text =await file.text();
            document.getElementById('output').textContent=text;
        }
    </script>
</body>
</html>

=================



arquivo.html
=============
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Criando arquivo texto em JavaScript</h1>
    <div>
    <label>Nome do Arquivo</label>
    <input type="text" id="titulo">
    </div>
    <div>
        <label>Texto</label>
        <textarea id="texto"></textarea>
    <br>
    <button onclick="salvar()">Salvar</button>
    </div>

    <script type="text/javascript" src="../javascript/FileSaver.js"></script>
    <script src="../javascript/index.js"></script>
</body>
</html>

====================

index.js
=======================
function salvar(){
    let texto = document.getElementById("texto").value;

    let titulo = document.getElementById("titulo").value;

    let blob = new Blob([texto],
    {
        type:"text/plain;charset=utf-8"

    });
    saveAs(blob,titulo + ".txt");
}

=======================

API - JavaScript
================
FileSaver.js
================
/*
* FileSaver.js
* A saveAs() FileSaver implementation.
*
*
*/

// The one and only way of getting global scope in all environments
// https://stackoverflow.com/q/3277182/1008999
var _global = typeof window === 'object' && window.window === window
  ? window : typeof self === 'object' && self.self === self
  ? self : typeof global === 'object' && global.global === global
  ? global
  : this

function bom (blob, opts) {
  if (typeof opts === 'undefined') opts = { autoBom: false }
  else if (typeof opts !== 'object') {
    console.warn('Deprecated: Expected third argument to be a object')
    opts = { autoBom: !opts }
  }

  // prepend BOM for UTF-8 XML and text/* types (including HTML)
  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
  if (opts.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })
  }
  return blob
}

function download (url, name, opts) {
  var xhr = new XMLHttpRequest()
  xhr.open('GET', url)
  xhr.responseType = 'blob'
  xhr.onload = function () {
    saveAs(xhr.response, name, opts)
  }
  xhr.onerror = function () {
    console.error('could not download file')
  }
  xhr.send()
}

function corsEnabled (url) {
  var xhr = new XMLHttpRequest()
  // use sync to avoid popup blocker
  xhr.open('HEAD', url, false)
  try {
    xhr.send()
  } catch (e) {}
  return xhr.status >= 200 && xhr.status <= 299
}

// `a.click()` doesn't work for all browsers (#465)
function click (node) {
  try {
    node.dispatchEvent(new MouseEvent('click'))
  } catch (e) {
    var evt = document.createEvent('MouseEvents')
    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,
                          20, false, false, false, false, 0, null)
    node.dispatchEvent(evt)
  }
}

// Detect WebView inside a native macOS app by ruling out all browsers
// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too
// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos
var isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)

var saveAs = _global.saveAs || (
  // probably in some web worker
  (typeof window !== 'object' || window !== _global)
    ? function saveAs () { /* noop */ }

  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView
  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)
  ? function saveAs (blob, name, opts) {
    var URL = _global.URL || _global.webkitURL
    // Namespace is used to prevent conflict w/ Chrome Poper Blocker extension (Issue #561)
    var a = document.createElementNS('http://www.w3.org/1999/xhtml', 'a')
    name = name || blob.name || 'download'

    a.download = name
    a.rel = 'noopener' // tabnabbing

    // TODO: detect chrome extensions & packaged apps
    // a.target = '_blank'

    if (typeof blob === 'string') {
      // Support regular links
      a.href = blob
      if (a.origin !== location.origin) {
        corsEnabled(a.href)
          ? download(blob, name, opts)
          : click(a, a.target = '_blank')
      } else {
        click(a)
      }
    } else {
      // Support blobs
      a.href = URL.createObjectURL(blob)
      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s
      setTimeout(function () { click(a) }, 0)
    }
  }

  // Use msSaveOrOpenBlob as a second approach
  : 'msSaveOrOpenBlob' in navigator
  ? function saveAs (blob, name, opts) {
    name = name || blob.name || 'download'

    if (typeof blob === 'string') {
      if (corsEnabled(blob)) {
        download(blob, name, opts)
      } else {
        var a = document.createElement('a')
        a.href = blob
        a.target = '_blank'
        setTimeout(function () { click(a) })
      }
    } else {
      navigator.msSaveOrOpenBlob(bom(blob, opts), name)
    }
  }

  // Fallback to using FileReader and a popup
  : function saveAs (blob, name, opts, popup) {
    // Open a popup immediately do go around popup blocker
    // Mostly only available on user interaction and the fileReader is async so...
    popup = popup || open('', '_blank')
    if (popup) {
      popup.document.title =
      popup.document.body.innerText = 'downloading...'
    }

    if (typeof blob === 'string') return download(blob, name, opts)

    var force = blob.type === 'application/octet-stream'
    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari
    var isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent)

    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {
      // Safari doesn't allow downloading of blob URLs
      var reader = new FileReader()
      reader.onloadend = function () {
        var url = reader.result
        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')
        if (popup) popup.location.href = url
        else location = url
        popup = null // reverse-tabnabbing #460
      }
      reader.readAsDataURL(blob)
    } else {
      var URL = _global.URL || _global.webkitURL
      var url = URL.createObjectURL(blob)
      if (popup) popup.location = url
      else location.href = url
      popup = null // reverse-tabnabbing #460
      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s
    }
  }
)

_global.saveAs = saveAs.saveAs = saveAs

if (typeof module !== 'undefined') {
  module.exports = saveAs;
}

==============================




Calculadora.html  ------> com bootstrap
==============

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Suuuper Calculadora</title>

    <!--Chamada das bibliotecas externas do CSS BootStrap-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <!--Chamada das bibliotecas externas do JS BootStrap-->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>



    <!--Criar o estilo do display-->
    <style>

        #display{
            width: 250px;
            height: 40px;
            background-color: black;
            margin: 4px;
            color:white;
            font-size: 18px;
            font-family: Verdana, Geneva, Tahoma, sans-serif;
            font-weight: bold;
        }

       /*Padrão botões*/
       #tecla0{
        width: 120px;
        height: 30px;
       }

       .vermelho{
        background-color: red;
       }
       .amarelo{
        background-color: yellow;
       }
        
    </style>

    <!--Criando funções em JavaScript para a nossa calculadora-->
    <script>
        /*Criando uma função para inserir valores no nosso display da calculadora*/
        function inserir(num){
            var numero=document.getElementById('display').innerHTML;
            document.getElementById('display').innerHTML=numero+num;

        }

        /*Limpando o conteúdo do nosso display*/
        function limpar(){
            document.getElementById('display').innerHTML=" ";
        }

    </script>
    
    


</head>
<body>
    
    <!--Criando o nosso display da calculadora-->
    <p id="display"></p>

    <!--Criando os  botões de interação da calculadora-->
    <button id="tecla1" onclick="inserir('1')">1</button>
    <button id="tecla2" onclick="inserir('2')">2</button>
    <button id="tecla3">3</button>
    <button id="tecla4">4</button><br><br>
    <button id="tecla5">5</button>
    <button id="tecla6">6</button>
    <button id="tecla7">7</button>
    <button id="tecla8">8</button><br><br>
    <button id="tecla9">9</button>
    <button id="tecla0">0</button>
    <button id="tecla+" onclick="inserir('+')">+</button>
    <button id="tecla-">-</button>
    <button id="tecla*">*</button>
    <button id="tecla/">/</button>
    <button id="tecla/" onclick="inserir('.')">.</button>
    <button id="tecla=" onclick="inserir('=')">=</button>
    <button id="tecla=" onclick="limpar()">C</button>   
    

    <!--Montando um layout com div-->
    <div class="container">  
        <div class="row">
            <div class="col-3 vermelho"><button id="tecla1" onclick="inserir('1')">1</button></div>
            <div class="col-3 amarelo">2</div>
            <div class="col-3">3</div>
            <div class="col-3">4</div>
        
        </div>
        <div class="row">
            <div class="col-3 vermelho">5</div>
            <div class="col-3 amarelo">6</div>
            <div class="col-3">3</div>
            <div class="col-3">4</div>
        
        </div>
        
    </div>
  




</body>
</html>



Calculadora.html  ---- > sem bootstrap
==============
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Suuuper Calculadora</title>

    <!--Criar o estilo do display-->
    <style>

        #display{
            width: 250px;
            height: 40px;
            background-color: black;
            margin: 4px;
            color:white;
            font-size: 18px;
            font-family: Verdana, Geneva, Tahoma, sans-serif;
            font-weight: bold;
        }

       /*Padrão botões*/
       #tecla0{
        width: 120px;
        height: 30px;
       }
        
    </style>

    <!--Criando funções em JavaScript para a nossa calculadora-->
    <script>
        /*Criando uma função para inserir valores no nosso display da calculadora*/
        function inserir(num){
            var numero=document.getElementById('display').innerHTML;
            document.getElementById('display').innerHTML=numero+num;

        }

        /*Limpando o conteúdo do nosso display*/
        function limpar(){
            document.getElementById('display').innerHTML=" ";
        }

    </script>
    
    


</head>
<body>
    
    <!--Criando o nosso display da calculadora-->
    <p id="display"></p>

    <!--Criando os  botões de interação da calculadora-->
    <button id="tecla1" onclick="inserir('1')">1</button>
    <button id="tecla2" onclick="inserir('2')">2</button>
    <button id="tecla3">3</button>
    <button id="tecla4">4</button><br><br>
    <button id="tecla5">5</button>
    <button id="tecla6">6</button>
    <button id="tecla7">7</button>
    <button id="tecla8">8</button><br><br>
    <button id="tecla9">9</button>
    <button id="tecla0">0</button>
    <button id="tecla+" onclick="inserir('+')">+</button>
    <button id="tecla-">-</button>
    <button id="tecla*">*</button>
    <button id="tecla/">/</button>
    <button id="tecla/" onclick="inserir('.')">.</button>
    <button id="tecla=" onclick="inserir('=')">=</button>
    <button id="tecla=" onclick="limpar()">C</button>   
    



</body>
</html>



Criando laço de repetição e utilização da variável const
=========================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Criando Regitros com Laco de Repetição</title>

    <script>
        // Criei uma variável do tipo matriz, um array
        const nome=["Pedro","Paulo","Ana","Flávia","Luciana","Nicole"];
        /*alert(nome[0]);
        alert(nome[1]);
        alert(nome[2]);
        alert(nome[3]);*/

        alert(nome.length);
        //Criando um laço de repetição
        for (let contador=0; contador<=10; contador++){
            alert(contador);
        }

    </script>




</head>
<body>
    
</body>
</html>



Formulário.html
===============
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulário Cadastro</title>

    <script>
        // Criando uma função em JavaScript
        function mensagem() {
            alert("Executando uma função em JavaScript");
        }

        //Criando uma função em JS, para validar os campos do formulário
        function validar() {
            let CampoNome = cadastro.nome.value;
            if (CampoNome == "") {
                alert("Por favor preencha o campo nome pois ele é obrigatório");
                cadastro.nome.focus();
                return false;
            } else {
                alert("Olá " + CampoNome + " sejam bem vindo");
            }
        }
    </script>

</head>

<body>
    <!--
        <form>
            <input type="button" onclick="mensagem()" value="Click">
        </form>-->

    <form name="cadastro" method="get">
        <label>Nome:</label>
        <input type="text" name="nome"><br><br>
        <label>Senha:</label>
        <input type="password" name="senha">
        <input type="submit" onclick="return validar()" value="Enviar">
    </form>

</body>

</html>



Página Index.html
================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página em JavaScript</title>

    <!--Criando a nossa intervenção em JavaScript-->
    <!--<script>
        // Trabalhar com variáveis 

        /*var mensagem ="Seja bem vindo";
        var mensagem1="a nossa página com JavaScript";
        alert(mensagem+" "+mensagem1);*/

        /*var nome = prompt("Olá seja bem vindo, qual é o seu nome?");
        alert("Prazer "+nome);*/

        // Uma mensagem demonstrada na tela
        //alert("Seja bem vindo a nossa página com JavaScript ");
    
    </script>-->
        
    <style>
        /* Criando um estilo para tag nativa em html*/ 
        p{
            color:red;
        }

        body{
            background-color: yellow;
        }

        /*Criando um estilo para classes */
        .virgem{
            color:green;
            font-size: 18px;
            font-weight: bold;
        }
    </style>

</head>
<body>
        <h1>Usando o JavaScript para crijar uma intervenção com o nosso HTML</h1>
        <p class="java"></p>
        <p>Isso é o meu primeiro parágrafo</p>
        <p>Isso é outro parágrafo</p>
        
   
        <p id="texto"></p><br>
        <p id="texto1" ></p>
     

        <script> 
            //Insere um texto na tag desejada
            document.getElementsByTagName("p")[1].innerHTML="Olá boa noite";

            //Insere um texto no id que está sendo relacionado 
            document.getElementById("texto").innerHTML="Oi meus querido(a)s";
            document.getElementById("texto1").innerHTML="Vamos codar em JavaScritp";
            
            //Inserir um conteúdo na classe criada para o java
            const collection=document.getElementsByClassName("java");
            collection[0].innerHTML="Oi";

        </script>


</body>
</html>


teste_js.html
=============

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <style>
        
        p{
            color: blue;
        }
    
        .cor{
            color:rebeccapurple;
        }
    </style>
</head>
<body>
    <p>Eu sou um parágrafo</p>
    <p class="cor">Parágrafo 2</p>
    <p>Parágrafo 3</p>

    <script>
        // Como atribuir uma cor com estilo CSS em uma tag da nossa página
        document.querySelector("p").style.color="red";
     

    </script>
</body>
</html>



1- Criamos uma pasta
2- Depois instalamos a aplicação
3- abrir a pasta criada
4- clicar com o botão direito na pasta, vamos escolher a opção git bash here
5- git --help
6- git --version
7- criei um arquivo de desenvolvimento dentro da pasta
8- git add . ou git add * criação da pilha que irá fazer o upload
9 -git status
10- git commit -m "Criando um arquivo de dados"
*** se for a sua primeira vez !!!

É a conta de e-mail que você utilizou para o seu github
git config --global user.email"ricardo.bontempo@gmail.com.br"

Depois de apontar o e-mail utilizado na sua conta,
ponha o nome do usuário que foi criado
git config --global user.name"RAB1802"

11- git push
Neste momento o programa git d versionamento irá pedir a sua pasta de armazenamento do github

Criando um branch
12 - git branch <nome da pasta> Exemplo teste
13 - git checkout 'teste'
14 - git add *
15 - git status
16 - git commit -m "Area para testes do usuário"
17 - git push
OBS.: é capaz dele pedir para você efetuar o push com o endereço do branch novo ou seja teste.


Quando criamos um novo branch

você pode fazer git checkout -b <branch>
assim ele já cria a nova branch e já vai direto para ela

**** Caso você tenha desenvolvido algo novo na sua aplicação e precisa subir novamente no seu github o novo conteúdo, você após adicionar as novas 
alterações deverá dar a sequencia de git add . , depois dit status 
git push origin main